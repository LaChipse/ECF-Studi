CREATE EXTENSION pgcrypto;

CREATE TABLE IF NOT EXISTS users (
 id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
 nom VARCHAR(30) NOT NULL,
 prenom VARCHAR(30) NOT NULL,
 mail VARCHAR(30) NOT NULL UNIQUE,
 role VARCHAR(30),
 dateCreated DATE NOT NULL,
 password CHAR(60) NOT NULL
);

CREATE TABLE IF NOT EXISTS administrateur (
 id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
 userId INT,
 FOREIGN KEY (userId) REFERENCES users(id)
	ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS apprenant (
 id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
 pseudo VARCHAR(30) NOT NULL,
 formSuivi INT[],
 formTerm INT[],
 coursTerm INT[],
 userId INT NOT NULL,
 FOREIGN KEY (userId) REFERENCES users(id)
	ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS instructeur (
 id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
 photoprofil bytea,
 specialites TEXT NOT NULL,
 validation VARCHAR(30) NOT NULL,
 userId INT NOT NULL,
 FOREIGN KEY (userId) REFERENCES users(id)
	ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS formation (
 id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
 titre VARCHAR(100) NOT NULL,
 image bytea,
 description TEXT NOT NULL,
 dateCreated DATE NOT NULL,
 intId INT NOT NULL,
 FOREIGN KEY (intId) REFERENCES instructeur(id)
	ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS section (
 id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
 titre VARCHAR(100) NOT NULL,
 formId INT NOT NULL,
 FOREIGN KEY (formId) REFERENCES formation(id)
	ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS cours (
 id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
 titre VARCHAR(100) NOT NULL,
 video bytea,
 description TEXT NOT NULL,
 sectionId INT NOT NULL,
 formId INT NOT NULL,
 FOREIGN KEY (sectionId) REFERENCES section(id)
	ON DELETE CASCADE,
 FOREIGN KEY (formId) REFERENCES formation(id)
	ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS quiz (
 id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
 question VARCHAR(100) NOT NULL,
 repFausse VARCHAR[] NOT NULL,
 repVraie VARCHAR[] NOT NULL,
 sectionId INT NOT NULL,
 FOREIGN KEY (sectionId) REFERENCES section(id)
	ON DELETE CASCADE
);